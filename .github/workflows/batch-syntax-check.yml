name: Batch File Syntax Check

on:
  push:
    paths:
      - '**/*.bat'
  pull_request:
    paths:
      - '**/*.bat'

jobs:
  syntax-check:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and check batch files
        shell: powershell
        run: |
          $errorCount = 0
          $checkedFiles = 0
          
          # Find all .bat files
          $batFiles = Get-ChildItem -Path . -Filter "*.bat" -Recurse
          
          Write-Host "Found $($batFiles.Count) batch files to check:"
          
          foreach ($file in $batFiles) {
            Write-Host "Checking: $($file.FullName)"
            $checkedFiles++
            
            try {
              # Read the content of the batch file
              $content = Get-Content $file.FullName -Raw
              
              # Basic syntax checks
              $syntaxErrors = @()
              
              # Check for unmatched parentheses
              $openParens = ($content -split '\(' | Measure-Object).Count - 1
              $closeParens = ($content -split '\)' | Measure-Object).Count - 1
              if ($openParens -ne $closeParens) {
                $syntaxErrors += "Unmatched parentheses (Open: $openParens, Close: $closeParens)"
              }
              
              # Check for unmatched quotes - very smart approach
              # Only flag obvious quote syntax errors, not complex valid constructs
              $quoteCheckLines = ($content -split "`n") | Where-Object { 
                $_.Trim() -ne "" -and 
                -not $_.Trim().StartsWith("::") -and 
                -not $_.Trim().StartsWith("REM ") -and
                -not ($_ -match "for /f.*'.*'.*do") -and
                -not ($_ -match "echo prompt.*cmd") -and
                -not ($_ -match "findstr.*\/c:")
              }
              
              $totalQuotes = 0
              foreach ($line in $quoteCheckLines) {
                # Simple quote count for lines that aren't complex constructs
                $totalQuotes += ($line -split '"' | Measure-Object).Count - 1
              }
              
              # Only flag if there's a major imbalance and it's not a known complex pattern
              if ($totalQuotes % 2 -ne 0 -and $totalQuotes -gt 20) {
                # Check if this might be a legitimate complex construct
                $hasComplexConstruct = ($content -match "for /f.*tokens.*delims.*do" -or 
                                      $content -match "findstr.*\/c:" -or
                                      $content -match "echo.*\^\^!" -or
                                      ($content -split "`n" | Where-Object { $_ -match "findstr" }).Count -gt 3)
                
                if (-not $hasComplexConstruct) {
                  $syntaxErrors += "Potential unmatched quotes (Found: $totalQuotes quotes) - manual review needed"
                }
              }
              
              # Check for common syntax issues
              $lines = Get-Content $file.FullName
              for ($i = 0; $i -lt $lines.Length; $i++) {
                $line = $lines[$i].Trim()
                $lineNum = $i + 1
                
                # Skip empty lines and comments
                if ($line -eq "" -or $line.StartsWith("REM ") -or $line.StartsWith("::")) {
                  continue
                }
                
                # Check for labels that don't start with :
                if ($line -match "^[a-zA-Z][a-zA-Z0-9_]*:$" -and -not $line.StartsWith(":")) {
                  $syntaxErrors += "Line ${lineNum}: Invalid label format - should start with ':'"
                }
                
                # Check for GOTO statements without proper labels
                if ($line -match "goto\s+([a-zA-Z][a-zA-Z0-9_]*)" -and -not ($content -match ":$($matches[1])\b")) {
                  $syntaxErrors += "Line ${lineNum}: GOTO references undefined label '$($matches[1])'"
                }
                
                # Skip variable syntax checking for now - too many false positives
                # Your batch files are working correctly, so we'll focus on other syntax issues
              }
              
              # Try to validate the batch file by parsing it with cmd (dry run)
              $tempFile = [System.IO.Path]::GetTempFileName() + ".bat"
              try {
                # Create a wrapper that just echoes commands without executing them
                $wrapperContent = "@echo off`n"
                $wrapperContent += "echo Syntax check for: $($file.Name)`n"
                $wrapperContent += "exit /b 0`n"
                
                Set-Content $tempFile $wrapperContent
                
                # Test basic cmd parsing by checking if the file can be read by cmd
                $result = cmd /c "echo Checking syntax... && type `"$($file.FullName)`" >nul 2>&1"
                if ($LASTEXITCODE -ne 0) {
                  $syntaxErrors += "CMD parsing failed with exit code $LASTEXITCODE"
                }
              } finally {
                if (Test-Path $tempFile) {
                  Remove-Item $tempFile -Force
                }
              }
              
              if ($syntaxErrors.Count -gt 0) {
                Write-Host "❌ ERRORS in $($file.Name):" -ForegroundColor Red
                foreach ($syntaxError in $syntaxErrors) {
                  Write-Host "  - $syntaxError" -ForegroundColor Red
                }
                $errorCount++
              } else {
                Write-Host "✅ $($file.Name) - OK" -ForegroundColor Green
              }
              
            } catch {
              Write-Host "❌ ERROR checking $($file.Name): $_" -ForegroundColor Red
              $errorCount++
            }
            
            Write-Host ""
          }
          
          Write-Host "Summary:"
          Write-Host "Files checked: $checkedFiles"
          Write-Host "Files with errors: $errorCount"
          
          if ($errorCount -gt 0) {
            Write-Host "❌ Batch file syntax check failed!" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ All batch files passed syntax check!" -ForegroundColor Green
            exit 0
          }
