name: Batch File Syntax Check

on:
  push:
    paths:
      - '**/*.bat'
  pull_request:
    paths:
      - '**/*.bat'

jobs:
  syntax-check:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find and check batch files
        shell: powershell
        run: |
          $errorCount = 0
          $checkedFiles = 0
          
          # Find all .bat files
          $batFiles = Get-ChildItem -Path . -Filter "*.bat" -Recurse
          
          Write-Host "Found $($batFiles.Count) batch files to check:"
          
          foreach ($file in $batFiles) {
            Write-Host "Checking: $($file.FullName)"
            $checkedFiles++
            
            try {
              # Read the content of the batch file
              $content = Get-Content $file.FullName -Raw
              
              # Basic syntax checks
              $syntaxErrors = @()
              
              # Check for unmatched parentheses
              $openParens = ($content -split '\(' | Measure-Object).Count - 1
              $closeParens = ($content -split '\)' | Measure-Object).Count - 1
              if ($openParens -ne $closeParens) {
                $syntaxErrors += "Unmatched parentheses (Open: $openParens, Close: $closeParens)"
              }
              
              # Check for unmatched quotes - improved to handle escaped quotes
              $quoteCount = 0
              $inQuotes = $false
              for ($j = 0; $j -lt $content.Length; $j++) {
                $char = $content[$j]
                if ($char -eq '"') {
                  # Check if this quote is escaped (preceded by ^)
                  if ($j -gt 0 -and $content[$j-1] -eq '^') {
                    continue
                  }
                  $quoteCount++
                }
              }
              if ($quoteCount % 2 -ne 0) {
                $syntaxErrors += "Unmatched double quotes (Found: $quoteCount quotes)"
              }
              
              # Check for common syntax issues
              $lines = Get-Content $file.FullName
              for ($i = 0; $i -lt $lines.Length; $i++) {
                $line = $lines[$i].Trim()
                $lineNum = $i + 1
                
                # Skip empty lines and comments
                if ($line -eq "" -or $line.StartsWith("REM ") -or $line.StartsWith("::")) {
                  continue
                }
                
                # Check for labels that don't start with :
                if ($line -match "^[a-zA-Z][a-zA-Z0-9_]*:$" -and -not $line.StartsWith(":")) {
                  $syntaxErrors += "Line ${lineNum}: Invalid label format - should start with ':'"
                }
                
                # Check for GOTO statements without proper labels
                if ($line -match "goto\s+([a-zA-Z][a-zA-Z0-9_]*)" -and -not ($content -match ":$($matches[1])\b")) {
                  $syntaxErrors += "Line ${lineNum}: GOTO references undefined label '$($matches[1])'"
                }
                
                # Check for invalid variable syntax - improved pattern
                # Look for % that's not part of a proper %var% or %~var pattern
                if ($line -match "%[^%\s]+[^%\s]$" -and $line -notmatch "%~.*%" -and $line -notmatch "%\w+%" -and $line -notmatch "%%") {
                  # Additional check to avoid false positives with special batch constructs
                  if ($line -notmatch "for\s+.*%\w+\s+in" -and $line -notmatch "set\s+.*%.*%") {
                    $syntaxErrors += "Line ${lineNum}: Potential unclosed variable reference"
                  }
                }
              }
              
              # Try to validate the batch file by parsing it with cmd (dry run)
              $tempFile = [System.IO.Path]::GetTempFileName() + ".bat"
              try {
                # Create a wrapper that just echoes commands without executing them
                $wrapperContent = "@echo off`n"
                $wrapperContent += "echo Syntax check for: $($file.Name)`n"
                $wrapperContent += "exit /b 0`n"
                
                Set-Content $tempFile $wrapperContent
                
                # Test basic cmd parsing by checking if the file can be read by cmd
                $result = cmd /c "echo Checking syntax... && type `"$($file.FullName)`" >nul 2>&1"
                if ($LASTEXITCODE -ne 0) {
                  $syntaxErrors += "CMD parsing failed with exit code $LASTEXITCODE"
                }
              } finally {
                if (Test-Path $tempFile) {
                  Remove-Item $tempFile -Force
                }
              }
              
              if ($syntaxErrors.Count -gt 0) {
                Write-Host "❌ ERRORS in $($file.Name):" -ForegroundColor Red
                foreach ($syntaxError in $syntaxErrors) {
                  Write-Host "  - $syntaxError" -ForegroundColor Red
                }
                $errorCount++
              } else {
                Write-Host "✅ $($file.Name) - OK" -ForegroundColor Green
              }
              
            } catch {
              Write-Host "❌ ERROR checking $($file.Name): $_" -ForegroundColor Red
              $errorCount++
            }
            
            Write-Host ""
          }
          
          Write-Host "Summary:"
          Write-Host "Files checked: $checkedFiles"
          Write-Host "Files with errors: $errorCount"
          
          if ($errorCount -gt 0) {
            Write-Host "❌ Batch file syntax check failed!" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ All batch files passed syntax check!" -ForegroundColor Green
            exit 0
          }
