name: Validate Version Milestone

on:
  pull_request:
    types: [opened, synchronize, edited, milestoned, demilestoned, labeled, unlabeled]
    branches:
      - main
      - master
      - develop

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate-version:
    runs-on: ubuntu-latest
    name: Check Version Matches Milestone
    # Only run this job if the PR has the 'release' label
    if: contains(github.event.pull_request.labels.*.name, 'release')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get PR milestone
      id: get-milestone
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const milestone = pr.milestone;
          if (!milestone) {
            core.setFailed('‚ùå No milestone assigned to this PR. Please assign a milestone that matches the version.');
            return;
          }
          
          console.log(`PR Milestone: ${milestone.title}`);
          core.setOutput('milestone', milestone.title);
          
    - name: Extract version from checkforupdate.bat
      id: extract-version
      run: |
        if [ ! -f "scripts/checkforupdate.bat" ]; then
          echo "‚ùå checkforupdate.bat not found in scripts directory"
          exit 1
        fi
        
        # Extract CURRENT_VERSION from the bat file
        VERSION=$(grep -oP 'set "CURRENT_VERSION=\K[^"]*' scripts/checkforupdate.bat)
        
        if [ -z "$VERSION" ]; then
          echo "‚ùå Could not extract CURRENT_VERSION from checkforupdate.bat"
          exit 1
        fi
        
        echo "Extracted version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Compare version with milestone
      uses: actions/github-script@v7
      with:
        script: |
          const milestone = '${{ steps.get-milestone.outputs.milestone }}';
          const version = '${{ steps.extract-version.outputs.version }}';
          
          console.log(`üîç Comparing:`);
          console.log(`   Milestone: "${milestone}"`);
          console.log(`   Version:   "${version}"`);
          
          // Normalize versions for comparison (remove v prefix if present)
          const normalizedMilestone = milestone.toLowerCase().replace(/^v/, '');
          const normalizedVersion = version.toLowerCase().replace(/^v/, '');
          
          if (normalizedMilestone === normalizedVersion) {
            console.log('‚úÖ Version matches milestone!');
            // Success - no comment needed, just pass the check
          } else {
            console.log('‚ùå Version does not match milestone!');
            
            // Try to post failure comment (but don't fail if we can't)
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå **Version Validation Failed**\n\n` +
                      `The version in \`scripts/checkforupdate.bat\` (\`${version}\`) does not match the PR milestone (\`${milestone}\`).\n\n` +
                      `Please either:\n` +
                      `- Update the \`CURRENT_VERSION\` variable in \`scripts/checkforupdate.bat\` to match the milestone\n` +
                      `- Or assign the correct milestone to this PR`
              });
            } catch (error) {
              console.log('Note: Could not post comment due to permissions, but validation failed');
            }
            
            core.setFailed(`Version mismatch: checkforupdate.bat has "${version}" but PR milestone is "${milestone}"`);
          }
