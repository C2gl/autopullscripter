name: Check Bug Report Log File

permissions:
  issues: write
  pull-requests: write
  contents: read

on:
  issues:
    types: [opened, edited]

jobs:
  check_logfile:
    runs-on: ubuntu-latest
    # Only run on issues that appear to be bug reports
    if: contains(github.event.issue.title, '[BUG]') || contains(github.event.issue.labels.*.name, 'bug')
    
    steps:
      - name: Check for log file attachment
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            
            // Common log file patterns to look for
            const logFilePatterns = [
              /\.log\b/gi,
              /\.txt\b.*log/gi,
              /log.*\.txt\b/gi,
              /error.*\.txt\b/gi,
              /debug.*\.txt\b/gi,
              /output.*\.txt\b/gi,
              /autopullscripter.*\.log\b/gi,
              /autopullscripter.*\.txt\b/gi
            ];
            
            // Check for file upload patterns (GitHub shows uploaded files as links)
            const fileUploadPatterns = [
              /\[.*\.log\]/gi,
              /\[.*\.txt\]/gi,
              /github\.com\/.*\/files\/\d+\/.*\.log/gi,
              /github\.com\/.*\/files\/\d+\/.*\.txt/gi,
              /user-attachments\/assets\/.*\.log/gi,
              /user-attachments\/assets\/.*\.txt/gi
            ];
            
            let hasLogFile = false;
            let foundFiles = [];
            
            // Check against all patterns
            [...logFilePatterns, ...fileUploadPatterns].forEach(pattern => {
              const matches = issueBody.match(pattern);
              if (matches) {
                hasLogFile = true;
                foundFiles.push(...matches);
              }
            });
            
            // Also check for generic "uploaded" or "attached" mentions with log-related keywords
            const uploadMentions = /uploaded|attached|include[ds]?/gi;
            const logMentions = /log\s*file|error\s*file|debug\s*file|output\s*file/gi;
            
            if (uploadMentions.test(issueBody) && logMentions.test(issueBody)) {
              hasLogFile = true;
            }
            
            // Get current labels
            const currentLabels = issue.labels.map(label => label.name);
            
            if (hasLogFile) {
              // Add "log-file-provided" label if log file is detected
              if (!currentLabels.includes('log-file-provided')) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['log-file-provided']
                });
                
                // Optional: Add a positive comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: 'âœ… Thank you for including log files! This will help us diagnose the issue faster.'
                });
              }
              
              // Remove "needs-log-file" label if it exists
              if (currentLabels.includes('needs-log-file')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'needs-log-file'
                });
              }
              
            } else {
              // Add "needs-log-file" label if no log file is detected
              if (!currentLabels.includes('needs-log-file') && !currentLabels.includes('log-file-provided')) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['needs-log-file']
                });
                
                // Add a helpful comment requesting log files
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `ðŸ“‹ **Log File Required**

To help us diagnose this issue effectively, please upload your log file(s). You can find them in the \`log/\` directory of your AutoPullScripter installation.

**How to attach log files:**
1. Locate your log files (usually in the \`log/\` folder)
2. Drag and drop the file(s) into this issue comment box, or
3. Click the "Attach files" link below the comment box

**Helpful files to include:**
- Any \`.log\` files from the \`log/\` directory
- Error output files
- Your \`repos.txt\` or \`repos_enhanced.txt\` file (as mentioned in the bug report checklist)

Thank you for helping us improve AutoPullScripter! ðŸš€`
                });
              }
            }
            
            console.log(`Log file detection: ${hasLogFile ? 'Found' : 'Not found'}`);
            if (foundFiles.length > 0) {
              console.log('Detected files:', foundFiles);
            }
